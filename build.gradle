/*
    LOCAL PROPERTIES
 */

ext {
    localProperty = "hello from local property"
}

/*
    TASK EXAMPLES
 */

task simpleTask {
    println "Hello from simple task"
}


task javaTask {
    Java java = new Java()
    java.print()
}

task functionTask {
    test()
    square(10)
}

project.task("PROJECT TASK")
task("test task 1")
task "test task 2"
task testTask3

//configuring testTask3
testTask3 {
    description "This is test task"
    group = "Only for tests"
    doFirst {
        println "doFirst called"
    }
    doLast {
        println "doLast called"
    }
    println "testTask3 called"
}

task testTask4 {
    //watch running gradle with -q option
    dependsOn(testTask3)
    doLast {
        println "testTask4 finished"
    }
}

task testTask5 {
    //write follow code to test shouldRunAfter
    //gradle -q testTask5 testTask4
    shouldRunAfter(testTask4)
    doLast {
        println "testTask5 finished"
    }
}

task task6 {
    println msg
    println localProperty
}

task task7(type: SomeTask) {

}
/*
    CLASS EXAMPLE
 */

class Java {
    static void print() {
        System.out.println("Hello from java task")
    }
}

class SomeTask extends DefaultTask {
    @TaskAction
    void doSome(){
        println "doSome called"
    }
}
/*
    FUNCTION EXAMPLE
 */

def test() {
    println "hello from test function"
}

static def square(arg) {
    println arg * arg
}

/*
    STRUCTURES
 */

def list = ["A", "B", "C"]

task structures {
    list.each { item -> println "list item: $item" }
}